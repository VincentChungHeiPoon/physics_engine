Vector& operator+(Vector& a, Vector& b) {       // vector addition
    Point *final_point = new Point(a.head->x + b.x_cmp, a.head->y + b.y_cmp, a.head->z + b.z_cmp);      // head of vector resulting from addition
    Vector *b2 = new Vector(a.head, final_point);       // creating "ghost" vector B
    Vector sum = Vector(a.tail, b2->head);      // result vector starts at a tail and ends at b2 head
    return sum;
}

Vector& operator-(Vector& a, Vector& b) {
    Point *final_point = new Point(a.head->x - b.x_cmp, a.head->y - b.y_cmp, a.head->z - b.z_cmp);
    Vector *b2 = new Vector(a.head, final_point);
    Vector diff = Vector(a.tail, b2->head);
    return diff;
}

Vector& operator*(double scalar, Vector& a) {   // multiply vector by some scalar
    double nx = a.tail->x + scalar*a.x_cmp;
    double ny = a.tail->y + scalar*a.y_cmp;
    double nz = a.tail->z + scalar*a.z_cmp;
    Point *vp = new Point(nx, ny, nz);
    Vector product = Vector(a.tail, vp);
    return product;
}

ostream& operator<<(ostream& os, Vector& vec) {
    string op = "x: " + to_string(vec.head->x) + " y: " + to_string(vec.head->y) \
    + " z: " + to_string(vec.head->z) + "\nmag: " + to_string(vec.mag);
    os << op << endl;
    return os;
}*